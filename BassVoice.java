package ebai.javamusic.wavey;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.MixerMonoRamped;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.unitgen.FilterLowPass;
import com.jsyn.unitgen.EnvelopeDAHDSR;
import com.jsyn.unitgen.Circuit;
import com.jsyn.unitgen.Subtract;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.SawtoothOscillatorBL;
import com.jsyn.unitgen.Add;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.softsynth.shared.time.TimeStamp;

public class BassVoice extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SawtoothOscillatorBL mSawOscBL;
    SawtoothOscillatorBL mSawOscBL2;
    MixerMonoRamped mMix4x1;
    SineOscillator mSineOsc;
    Add mAplus;
    Subtract mAminus;
    FilterLowPass mLowPass;
    PassThrough mFilterFreqPassThrough;
    public UnitInputPort filterFreq;
    EnvelopeDAHDSR mDAHDSR;
    Multiply mAtimes;

    // Declare inner classes for any child circuits.

    public BassVoice() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        add(mSawOscBL = new SawtoothOscillatorBL());
        add(mSawOscBL2 = new SawtoothOscillatorBL());
        add(mMix4x1 = new MixerMonoRamped(4));
        add(mSineOsc = new SineOscillator());
        add(mAplus = new Add());
        add(mAminus = new Subtract());
        add(mLowPass = new FilterLowPass());
        add(mFilterFreqPassThrough = new PassThrough());
        addPort(filterFreq = mFilterFreqPassThrough.input, "filterFreq");
        add(mDAHDSR = new EnvelopeDAHDSR());
        add(mAtimes = new Multiply());
        // Connect units and ports.
        mFrequencyPassThrough.output.connect(mAplus.inputA);
        mFrequencyPassThrough.output.connect(mAminus.inputA);
        mAmplitudePassThrough.output.connect(mDAHDSR.amplitude);
        mSawOscBL.output.connect(mMix4x1.input);
        mSawOscBL2.output.connect(0, mMix4x1.input, 1);
        mMix4x1.output.connect(mAtimes.inputA);
        mSineOsc.output.connect(mAplus.inputB);
        mSineOsc.output.connect(mAminus.inputB);
        mAplus.output.connect(mSawOscBL.frequency);
        mAminus.output.connect(mSawOscBL2.frequency);
        mLowPass.output.connect(mOutputPassThrough.input);
        mFilterFreqPassThrough.output.connect(mLowPass.frequency);
        mDAHDSR.output.connect(mAtimes.inputB);
        mAtimes.output.connect(mLowPass.input);
        // Setup
        frequency.setup(4.0, 50.0, 8000.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mSawOscBL.amplitude.set(1.0);
        mSawOscBL2.amplitude.set(1.0);
        mMix4x1.input.set(2, 0.0);
        mMix4x1.input.set(3, 1.0);
        mMix4x1.gain.set(0.5);
        mMix4x1.gain.set(1, 0.5);
        mMix4x1.gain.set(2, 1.0);
        mMix4x1.gain.set(3, 1.0);
        mMix4x1.amplitude.set(0.5);
        mSineOsc.frequency.set(0.1133606495450738);
        mSineOsc.amplitude.set(1.0);
        mLowPass.amplitude.set(1.0);
        mLowPass.Q.set(1.0);
        filterFreq.setup(40.0, 40.0, 6000.0);
        mDAHDSR.input.set(0.0);
        mDAHDSR.delay.set(0.0);
        mDAHDSR.attack.set(0.0);
        mDAHDSR.hold.set(0.0);
        mDAHDSR.decay.set(0.2);
        mDAHDSR.sustain.set(1.0);
        mDAHDSR.release.set(0.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mDAHDSR.input.on(timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mDAHDSR.input.off(timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
